#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
# README - mathsubs
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#

This module contains different kind of miscelaneous auxilliary
subroutines and functions used throughout the main program lio.
Here are the instructions on what needs to be modified in order
to include new subroutines and functions.


#--------------------------------------------------------------------#
# HOW TO INTRODUCE A NEW PROCEDURE
#--------------------------------------------------------------------#

In order for new procedures to be incorporated in the module,
they must be first writen in respective ".f" files and saved
inside this containig folder.

Many procedures may be written in the same ".f" file. Moreover,
it is specially recommended to do this in the case of procedures
meant to be overloaded under the same interface.

It is also possible to incorporate new procedure in the files
that are already being included in the module, but it is not
recommended to do so unless you are the author of said files
or you have contacted the author first.

Once one has a new file "newfile.f" with procedures to be
incorporated in the module, one needs to do two modifications
in the existing files:


(1) Add the following line in the file "mathsubs.f", in the section
    reserved for procedure-containing files. The syntax to be used
    is the same as the other code in that section.

>       include 'newfile.f'

(2) Add the new file as a dependency of mathsubs in the Makefile
    file by concatenating it in the INCLUDES variable that is
    defined in the DEPENDENCIES section of the code.


#--------------------------------------------------------------------#
# HOW TO GROUP PROCEDURES INSIDE AN INTERFACE
#--------------------------------------------------------------------#

If one has many variations of one procedure, one can group all
of them together inside an interface by creating another file
where the interface is specified and then including this file
in the section for headers using the same syntax as before.
This file also needs to be incorporated as a dependency by
concatenating it to the INCLUDES variable.

One has to remember to be specially carefull when introducing
the parameters of a subroutine that is overloaded (part of an
interface). The most advisable thing to do is to always use
variables to pass the arguments instead of doing so directly.

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
